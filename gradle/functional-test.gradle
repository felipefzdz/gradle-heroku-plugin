sourceSets {
    functionalTest {
        groovy.srcDir file('src/functTest/groovy')
        resources.srcDir file('src/functTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    environment 'HEROKU_HOST', 'http://localhost:8080'
    if (project.hasProperty('recordScenarios')) {
        assert environment.get('GRADLE_HEROKU_PLUGIN_API_KEY') != null
        environment 'GRADLE_HEROKU_PLUGIN_APP_PROXY', 'http://localhost:8081'
        environment 'GRADLE_HEROKU_PLUGIN_RECORD_SCENARIOS', 'ENABLED'
    } else {
        environment 'GRADLE_HEROKU_PLUGIN_APP_PROXY', 'http://localhost:8080'
        environment 'GRADLE_HEROKU_PLUGIN_SKIP_WAITS', true

    }
    if (project.hasProperty('debugTest')) {
        debug = true
    }
    mustRunAfter test
}

check.dependsOn functionalTest

gradlePlugin {
    testSourceSets sourceSets.functionalTest
}
